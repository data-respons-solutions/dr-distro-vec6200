pipeline {
	agent any
	
	parameters {
		string name: 'SSTATE', defaultValue: '${OE_SSTATE_DIR}', description: 'SSTATE directory'
		string name: 'DOWNLOADS', defaultValue: '${OE_DL_DIR}', description: 'Downloads directory'
		string name: 'SFTP_URL', defaultValue: 'ftp.datarespons.com', description: 'sftp server url'
		string name: 'SFTP_PATH', defaultValue: 'nexcom/vec6200/image/', description: 'sftp path'
	}
	
	environment {
		MACHINE = "vec6200"
		FACTORY_MACHINE = "${MACHINE}-factory"
		VEC6200_IMAGE_ARTIFACTS = "workdir/tmp-glibc/deploy/images/${MACHINE}/vec6200-image-${MACHINE}-*rootfs*"
		FACTORY_IMAGE_ARTIFACTS = "workdir/tmp-glibc/deploy/images/${FACTORY_MACHINE}/factory-image-${FACTORY_MACHINE}-*rootfs*"
		BUILD_USER = "${sh (returnStdout: true, script: 'id -un').trim()}"
		BUILD_UID = "${sh (returnStdout: true, script: 'id -u').trim()}"
		BUILD_GID = "${sh (returnStdout: true, script: 'id -g').trim()}"
		BUILD_HOME = "${sh (returnStdout: true, script: 'getent passwd $(id -un) | cut -d: -f6').trim()}"
	}
	
	stages {
	stage('Init') {
		steps {
			// Jenkins git module allows recursively updating submodules.
			// It works fine for a clean build but consequent builds where a single submodule is updated
			// will fail due to credentials.
			// Workaround is to update submodules from this step instead.
			sshagent (credentials: ['github-data-respons-solutions']) {
				sh """
					git submodule update --init
				"""
			}
		}
	}
	
	stage('Container') {
		agent {
			dockerfile {
				filename 'oe-build.docker'
				dir 'build/build-tools'
				args "-v ${SSTATE}:${SSTATE} -v ${DOWNLOADS}:${DOWNLOADS} -v ${BUILD_HOME}/.ssh:/home/${BUILD_USER}/.ssh"
				additionalBuildArgs "--build-arg USERNAME=${BUILD_USER} --build-arg UID=${BUILD_UID} --build-arg GID=${BUILD_GID}"
				reuseNode true
			}
		}
	
		stages {
		stage('Build') {
			steps {
				sshagent (credentials: ['github-data-respons-solutions', 'sftp-data-respons-solutions']) {
					sh """
						rm -rf workdir
						TEMPLATECONF="../build/conf" source ./oe-core/oe-init-build-env workdir
						sed -i 's|.*DL_DIR ?=.*|DL_DIR ?= "${DOWNLOADS}"|' conf/local.conf
						sed -i 's|.*SSTATE_DIR ?=.*|SSTATE_DIR ?= "${SSTATE}"|' conf/local.conf
						sed -i 's|.*ACCEPT_FSL_EULA.*|ACCEPT_FSL_EULA = "1"|' conf/local.conf
						export DR_CM_COMMIT="$(git describe --always --tags --long --dirty)"
						export DR_BUILD_NO="${BUILD_NUMBER}"
						export DR_BUILD_PLAN="${JOB_NAME}"
						export BB_ENV_EXTRAWHITE="DR_BUILD_PLAN DR_BUILD_NO DR_CM_COMMIT MACHINE"
						bitbake vec6200-image
						export MACHINE="${FACTORY_MACHINE}"
						bitbake factory-image
					"""
				}
			}
		}
		stage('Deploy') {
			steps {
				// .ssh/config in container must include config for Host ${SFTP_URL}
				// Example for SFTP_URL=ftp.datarespons.com:
				// Host ftp.datarespons.com
				//         User ms@datarespons.se
				//         IdentityFile ~/.ssh/id_rsa
				//
				sshagent (credentials: ['sftp-data-respons-solutions']) {
					sh """
						echo -e "put ${VEC6200_IMAGE_ARTIFACTS} ${SFTP_PATH}\nput ${FACTORY_IMAGE_ARTIFACTS} ${SFTP_PATH}" | \
						sftp -b - ${SFTP_URL}						
					"""
				}
			}
		}
		}
	}
	}
}
